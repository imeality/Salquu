import EventEmitter from 'events';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function tick() {
  if (this._status === 'paused') return;

  if (Date.now() >= this._endTime) {
    this.stop();
    this.emit('tick', this._stopwatch ? this._duration : 0);
    this.emit('done');
  } else {
    this.emit('tick', this.time);
  }
}

var Timer =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Timer, _EventEmitter);

  function Timer() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$interval = _ref.interval,
        interval = _ref$interval === void 0 ? 1000 : _ref$interval,
        _ref$stopwatch = _ref.stopwatch,
        stopwatch = _ref$stopwatch === void 0 ? false : _ref$stopwatch;

    _classCallCheck(this, Timer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this));
    _this._interval = interval;
    _this._stopwatch = stopwatch;
    _this._endTime = 0;
    _this._pauseTime = 0;
    _this._duration = null;
    _this._timeoutID = null;
    _this._status = 'stopped'; // 'running' or 'paused'

    return _this;
  }

  _createClass(Timer, [{
    key: "start",
    value: function start(duration, interval) {
      if (this._status !== 'stopped') return;
      if (duration == null) throw new TypeError('must provide duration parameter');
      this._duration = duration;
      this._endTime = Date.now() + duration;

      this._changeStatus('running');

      this.emit('tick', this._stopwatch ? 0 : this._duration);
      this._timeoutID = setInterval(tick.bind(this), interval || this._interval);
    }
  }, {
    key: "stop",
    value: function stop() {
      clearInterval(this._timeoutID);

      this._changeStatus('stopped');
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this._status !== 'running') return;
      this._pauseTime = Date.now();

      this._changeStatus('paused');
    }
  }, {
    key: "resume",
    value: function resume() {
      if (this._status !== 'paused') return;
      this._endTime += Date.now() - this._pauseTime;
      this._pauseTime = 0;

      this._changeStatus('running');
    }
  }, {
    key: "_changeStatus",
    value: function _changeStatus(status) {
      this._status = status;
      this.emit('statusChanged', this._status);
    }
  }, {
    key: "time",
    get: function get() {
      if (this._status === 'stopped') return 0;
      var time = this._status === 'paused' ? this._pauseTime : Date.now();
      var left = this._endTime - time;
      return this._stopwatch ? this._duration - left : left;
    }
  }, {
    key: "duration",
    get: function get() {
      return this._duration;
    }
  }, {
    key: "status",
    get: function get() {
      return this._status;
    }
  }]);

  return Timer;
}(EventEmitter);

export default Timer;
